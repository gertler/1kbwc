# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

volumes:
  db_data:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST: db
  REDIS_HOST: redis
  DATABASE_USERNAME_FILE: /run/secrets/pg-user
  DATABASE_PASSWORD_FILE: /run/secrets/pg-password
  DATABASE_NAME_FILE: /run/secrets/pg-database
  AWS_ACCESS_KEY_FILE: /run/secrets/aws-access-key
  AWS_SECRET_ACCESS_KEY_FILE: /run/secrets/aws-secret-access-key

x-shared_secrets: &shared_secrets
  secrets:
    - pg-user
    - pg-password
    - pg-database
    - aws-access-key
    - aws-secret-access-key
  
services:
  app:
    image: 1kbwc:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
      - redis
    networks:
      - backend
    # commented out to not expose port circumventing nginx reverse proxy
#    ports:
#      - '8080:8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
    <<: *shared_secrets
  # Run db migrations (docker-compose run migrate)
  migrate:
    image: 1kbwc:latest
    build:
      context: .
    networks:
      - backend
    environment:
      <<: *shared_environment
    depends_on:
      - db
      - redis
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
    <<: *shared_secrets
  # Revert db migrations (docker-compose run revert)
  revert:
    image: 1kbwc:latest
    build:
      context: .
    networks:
      - backend
    environment:
      <<: *shared_environment
    depends_on:
      - db
      - redis
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
    <<: *shared_secrets
  # Runs the "routes" command on vapor, which prints out all API routes in a table
  routes:
    image: 1kbwc:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    command: ["routes"]
    deploy:
      replicas: 0
    <<: *shared_secrets
  db:
    image: postgres:14-alpine
    networks:
      - backend
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER_FILE: /run/secrets/pg-user
      POSTGRES_PASSWORD_FILE: /run/secrets/pg-password
      POSTGRES_DB_FILE: /run/secrets/pg-database
    # Comment out ports to hide service from outside connections
    ports:
      - '5432:5432'
    secrets:
      - pg-user
      - pg-password
      - pg-database
  nginx:
    image: my-nginx:latest
    build:
      context: ./nginx
    depends_on:
      - app
    networks:
      - backend
    environment:
      - UPSTREAM=app
      - UPSTREAM_PORT=8080
    ports:
      - '80:80'
      - '443:443'
  redis:
    image: redis:7
    networks:
      - backend
    # Comment out ports to hide service from outside connections
    ports:
      - '6379:6379'

networks:
    backend:

secrets:
  admin-user:
    file: ./secrets/admin_user.txt
  admin-password:
    file: ./secrets/admin_password.txt
  pg-user:
    file: ./secrets/pg_user.txt
  pg-password:
    file: ./secrets/pg_password.txt
  pg-database:
    file: ./secrets/pg_database.txt
  aws-access-key:
    file: ./secrets/aws_access_key.txt
  aws-secret-access-key:
    file: ./secrets/aws_secret_access_key.txt
